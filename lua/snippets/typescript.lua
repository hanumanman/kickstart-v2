local ls = require 'luasnip'
local s = ls.snippet
local t = ls.text_node

return {
  s({ trig = 'envconfig', name = 'Environment Configuration' }, {
    t 'import { z } from "zod/v4"',
    t { '', '' },
    t { '', '' },
    t '// Define the schema for environment variables',
    t { '', 'const envSchema = z.object({' },
    t { '', '  // Node environment' },
    t { '', '  NODE_ENV: z' },
    t { '', '    .enum(["development", "production", "test"])' },
    t { '', '    .default("development"),' },
    t { '', '' },
    t { '', '  // Google OAuth credentials' },
    t { '', '  GOOGLE_CLIENT_ID: z.string().min(1, "GOOGLE_CLIENT_ID is required"),' },
    t { '', '  GOOGLE_CLIENT_SECRET: z.string().min(1, "GOOGLE_CLIENT_SECRET is required"),' },
    t { '', '  // Server configuration' },
    t { '', '  PORT: z.coerce.number().positive().default(3000),' },
    t { '', '})' },
    t { '', '' },
    t { '', '// Type inference from the schema' },
    t { '', 'export type Env = z.infer<typeof envSchema>' },
    t { '', '' },
    t { '', '// Validate and parse environment variables' },
    t { '', 'function validateEnv(): Env {' },
    t { '', '  const result = envSchema.safeParse(process.env)' },
    t { '', '' },
    t { '', '  if (!result.success) {' },
    t { '', '    console.error("‚ùå Invalid environment variables:")' },
    t { '', '' },
    t { '', '    // Create a detailed error message' },
    t { '', '    const errorMessages = z.prettifyError(result.error)' },
    t { '', '' },
    t { '', '    throw new Error(' },
    t { '', '      `Environment validation failed:\\n${errorMessages}\\n\\nPlease check your .env file and ensure all required variables are set.`' },
    t { '', '    )' },
    t { '', '  }' },
    t { '', '' },
    t { '', '  return result.data' },
    t { '', '}' },
    t { '', '' },
    t { '', '// Export the validated environment variables' },
    t { '', 'export const env = validateEnv()' },
  }),
}
