-- return {
--   'nvim-telescope/telescope.nvim',
--   event = 'VimEnter',
--   enabled = false,
--   branch = '0.1.x',
--   dependencies = {
--     'nvim-lua/plenary.nvim',
--     {
--       'nvim-telescope/telescope-fzf-native.nvim',
--       -- `build` is used to run some command when the plugin is installed/updated.
--       -- This is only run then, not every time Neovim starts up.
--       build = 'make',
--
--       -- `cond` is a condition used to determine whether this plugin should be
--       -- installed and loaded.
--       cond = function()
--         return vim.fn.executable 'make' == 1
--       end,
--     },
--     { 'nvim-telescope/telescope-ui-select.nvim' },
--
--     -- Useful for getting pretty icons, but requires a Nerd Font.
--     { 'nvim-tree/nvim-web-devicons', enabled = vim.g.have_nerd_font },
--   },
--   config = function()
--     -- For formatting telescope result
--     vim.api.nvim_create_autocmd('FileType', {
--       pattern = 'TelescopeResults',
--       callback = function(ctx)
--         vim.api.nvim_buf_call(ctx.buf, function()
--           vim.fn.matchadd('TelescopeParent', '\t\t.*$')
--           vim.api.nvim_set_hl(0, 'TelescopeParent', { link = 'Comment' })
--         end)
--       end,
--     })
--     local function filenameFirst(_, path)
--       local tail = vim.fs.basename(path)
--       local parent = vim.fs.dirname(path)
--       if parent == '.' then
--         return tail
--       end
--       return string.format('%s\t\t%s', tail, parent)
--     end
--
--     require('telescope').setup {
--       defaults = {
--         path_display = filenameFirst,
--         layout_strategy = 'vertical',
--       },
--       pickers = {
--         oldfiles = {
--           cwd_only = true,
--           theme = 'ivy',
--         },
--         find_files = {
--           hidden = false,
--           theme = 'ivy',
--         },
--         treesitter = {
--           sorting_strategy = 'ascending',
--           theme = 'ivy',
--         },
--         live_grep = {
--           theme = 'ivy',
--         },
--         buffers = {
--           theme = 'ivy',
--         },
--       },
--       extensions = {
--         ['ui-select'] = {
--           require('telescope.themes').get_dropdown(),
--         },
--       },
--     }
--
--     -- Enable Telescope extensions if they are installed
--     pcall(require('telescope').load_extension, 'fzf')
--     pcall(require('telescope').load_extension, 'ui-select')
--
--     -- See `:help telescope.builtin`
--     local builtin = require 'telescope.builtin'
--     vim.keymap.set('n', '<leader>s', builtin.find_files, { desc = 'Search [F]iles' })
--     vim.keymap.set(
--       'n',
--       '<leader>da',
--       '<cmd>lua require"telescope.builtin".find_files({ hidden=true, no_ignore=true })<CR>',
--       { desc = 'Search Files (include hidden and gitignored)' }
--     )
--     vim.keymap.set('n', '<leader>dw', builtin.live_grep, { desc = 'Search by [G]rep' })
--     vim.keymap.set('n', '<leader>dd', builtin.resume, { desc = 'Search [R]esume' })
--     vim.keymap.set('n', '<leader>do', builtin.oldfiles, { desc = 'Search  [O]ldfiles' })
--     vim.keymap.set('n', '<leader>ds', builtin.treesitter, { desc = 'Search treesitter' })
--     vim.keymap.set('n', '<leader>db', builtin.buffers, { desc = 'Find existing Buffers' })
--
--     -- Slightly advanced example of overriding default behavior and theme
--     vim.keymap.set('n', '<leader>/', function()
--       -- You can pass additional configuration to Telescope to change the theme, layout, etc.
--       builtin.current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
--         -- winblend = 10,
--         -- previewer = false,
--       })
--     end, { desc = '[/] Fuzzily search in current buffer' })
--
--     -- It's also possible to pass additional configuration options.
--     --  See `:help telescope.builtin.live_grep()` for information about particular keys
--     vim.keymap.set('n', '<leader>dj', function()
--       builtin.live_grep {
--         grep_open_files = true,
--         prompt_title = 'Live Grep in Open Files',
--       }
--     end, { desc = '[S]earch [/] in Open Files' })
--   end,
-- }
return {}
